import { API_URL } from './config';

export const getRooms = async () => {
  try {
    const response = await fetch(`${API_URL}/rooms`);
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
    }
    const data = await response.json();
    return data.rooms || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–Ω–∞—Ç:', error);
    return [];
  }
};

export const createRoom = async (name, theme) => {
    try {
      const response = await fetch(`${API_URL}/rooms`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, theme }),
      });
  
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: ${response.status}`);
      }
  
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      return null;
    }
  };
  
 export const getColumns = async (roomId) => {
    try {
      const response = await fetch(`${API_URL}/columns?roomId=${roomId}`);
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: ${response.status} ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–æ–Ω–æ–∫:", error);
      return [];
    }
  };

  export const createColumn = async (roomId, title) => {
    try {
      const response = await fetch(`${API_URL}/columns`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ room_id: roomId, title }), // ‚úÖ –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
      });
  
      const text = await response.text(); // –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text);
  
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏');
      return JSON.parse(text);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ createColumn:', error);
      return null;
    }
  };
  
  
  
 export const createTask = async (columnId, text) => {
     try {
       const requestBody = { column_id: columnId, text };
       console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ createTask:", requestBody);
   
       const response = await fetch(`${API_URL}/tasks`, {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify(requestBody),
       });
   
       if (!response.ok) {
         const errorText = await response.text();
         throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${response.status} ${response.statusText} - ${errorText}`);
       }
   
       return await response.json();
     } catch (error) {
       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
       return null;
     }
   };
   
  

  export const updateColumn = async (columnId, title) => {
    try {
      const res = await fetch(`${API_URL}/columns/${columnId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title }),
      });
      return await res.json();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ updateColumn:', err);
      return null;
    }
  };
  
  export const deleteColumn = async (columnId) => {
    try {
      const res = await fetch(`${API_URL}/columns/${columnId}`, { method: 'DELETE' });
      return res.ok;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ deleteColumn:', err);
      return false;
    }
  };
  
  export const updateTask = async (taskId, text) => {
    try {
      const res = await fetch(`${API_URL}/tasks/${taskId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      return await res.json();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ updateTask:', err);
      return null;
    }
  };
  
  export const deleteTask = async (taskId) => {
    try {
      const res = await fetch(`${API_URL}/tasks/${taskId}`, { method: 'DELETE' });
      return res.ok;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ deleteTask:', err);
      return false;
    }
  };
  

  export const loginUser = async (email, password) => {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /users/login');
  
      const response = await fetch(`${API_URL}/users/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
  
      const text = await response.text();
      console.log('üì• RAW –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text);
  
      const data = JSON.parse(text);
  
      if (!response.ok) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status, data.message);
        return null;
      }
  
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data);
      return {
        token: data.data?.token,
        user: data.data?.user,
      };
    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞ loginUser:', err);
      return null;
    }
  };
  
  
  export const registerUser = async (name, username, email, password) => {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /users/register');
  
      const response = await fetch(`${API_URL}/users/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, username, email, password }),
      });
  
      const text = await response.text();
      console.log('üì• RAW –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text);
  
      const data = JSON.parse(text);
  
      if (!response.ok) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response.status, data.message);
        return null;
      }
  
      console.log('‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π data:', data);
      return data.data?.user || null;
    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞ registerUser:', err);
      return null;
    }
  };
  
  
  